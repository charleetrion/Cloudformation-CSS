AWSTemplateFormatVersion: "2010-09-09"
Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: LambdaVPCAccess  # ✅ Agregar permisos para crear Network Interfaces (ENI)
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  # Función Lambda
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Runtime: python3.9
      Handler: index.lambda_handler    # Especifica el archivo y la función que se ejecutará
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      MemorySize: 256

  # Conexion a la VPC
      VpcConfig:
        SubnetIds:
          - !ImportValue MyPublicSubnetId
          - !ImportValue MyPublicSubnet2Id
        SecurityGroupIds:
          - !ImportValue LambdaSecurityGroup

      Environment:
        Variables:
          DB_HOST: "fastapi-rds-mysql-public.cdg8ka0syqql.us-east-1.rds.amazonaws.com"
          DB_PORT: "3306"
          DB_NAME: "FastapiCloudFormation"
          DB_USER: "admin"
          DB_PASSWORD: "CDAR159930j"

      Layers:
        - "arn:aws:lambda:us-east-1:503561429281:layer:pymysql:3"
      Code:
        ZipFile: |
          import json
          import pymysql
          import os
          
          def lambda_handler(event, context):
              try:
                  connection = pymysql.connect(
                      host=os.environ['DB_HOST'],
                      user=os.environ['DB_USER'],
                      password=os.environ['DB_PASSWORD'],
                      database=os.environ['DB_NAME'],
                      port=int(os.environ['DB_PORT']),
                      cursorclass=pymysql.cursors.DictCursor
                  )
                  
                  with connection.cursor() as cursor:
                     cursor.execute("SELECT * FROM users;")
                     users = cursor.fetchall()
                  
                  connection.close()
          
                  return {
                      "statusCode": 200,
                      "body": json.dumps({"users": users})
                  }
          
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": json.dumps({"error": str(e)})
                  }

Outputs:
  LambdaFunctionArn:
    Description: "ARN de la función Lambda"
    Value: !GetAtt MyLambdaFunction.Arn
    Export:
      Name: LambdaFunctionArn
